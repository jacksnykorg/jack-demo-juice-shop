name: Example workflow for Node using Snyk

on:
push:
branches: [ master, main ]
pull_request:
branches: [ master, main ]

jobs:
security:
runs-on: ubuntu-latest

permissions:
  contents: read
  security-events: write # Required to upload SARIF results

steps:
  # 1. Checkout the repository code
  - name: Checkout Code
    uses: actions/checkout@v4

  # 2. Setup Node.js Environment (Crucial for Snyk Node scans)
  - name: Setup Node
    uses: actions/setup-node@v4
    with:
      node-version: 20 # Use a stable Node version

  # 3. Install dependencies (Crucial for Snyk to fully analyze packages)
  - name: Install Dependencies
    run: npm install

  # 4. Run Snyk Scan and output SARIF
  - name: Run Snyk to check for vulnerabilities and generate SARIF
    # Use the specific action for the language/ecosystem
    uses: snyk/actions/node@master
    
    # This prevents the workflow from failing immediately if vulnerabilities are found
    continue-on-error: true 
    
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      
    with:
      # Use snyk code test for static analysis, or snyk test for dependencies
      command: test 
      # Specify the output file
      args: --sarif-file-output=snyk.sarif 

  # 5. Upload the SARIF file to GitHub Code Scanning
  - name: Upload result to GitHub Code Scanning
    uses: github/codeql-action/upload-sarif@v3
    with:
      # Use the exact file name generated by Snyk
      sarif_file: snyk.sarif
